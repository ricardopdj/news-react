{"version":3,"sources":["img/gaucha.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","news","filteredNews","loading","loaded","document","getElementById","style","display","componentDidMount","e","then","t","bind","content","_this","setState","catch","alert","filterNews","query","match","RegExp","escapeRegExp","filter","n","test","title","_this2","this","react_default","a","createElement","Container","className","Row","Col","src","gaucha","alt","height","lib","time","handler","Input","onChange","event","target","value","placeholder","bsSize","CardColumns","map","index","Card","key","CardImg","top","width","img","CardBody","CardTitle","CardText","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sXCyGzBC,6MArFXC,MAAQ,CACNC,KAAM,GACNC,aAAc,GACdC,SAAS,KAGXC,OAAS,WACPC,SAASC,eAAe,UAAUC,MAAMC,QAAU,UAGpDC,kBAAoB,WAClBZ,EAAAa,EAAA,GAAAC,KAAAd,EAAAe,EAAAC,KAAA,YAAiBF,KAAK,SAAAG,GACpBC,EAAKC,SAAS,CACZf,KAAMa,EAAQb,KACdC,aAAcY,EAAQb,KACtBE,SAAS,IAEXY,EAAKX,WAENa,MAAM,WACLC,MAAM,8DAIVC,WAAa,SAACC,GACZ,IAAMC,EAAQ,IAAIC,OAAOC,IAAaH,GAAQ,KAC9CL,EAAKC,SAAS,CACZd,aAAca,EAAKf,MAAMC,KAAKuB,OAAO,SAAAC,GAAC,OAAIJ,EAAMK,KAAKD,EAAEE,oFAIlD,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,UAAU,SACjBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKD,UAAWL,KAAK7B,MAAMG,QAAU,YAAc,IAC/C2B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKF,UAAU,eACbJ,EAAAC,EAAAC,cAAA,OAAKK,IAAKC,IAAQC,IAAI,OAAOhC,MAAO,CAACiC,OAAQ,cAIhDX,KAAK7B,MAAMG,SACd2B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KAAKN,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SAAd,iBAETJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKD,UAAU,QACXJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACS,EAAA,SAAD,CAAUC,KAAK,MAAMC,QAAQ,YAC3Bb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,SAAU,SAACC,GAAD,OAAWlB,EAAKT,WAAW2B,EAAMC,OAAOC,QAClDC,YAAY,qBACZC,OAAO,UAMjBpB,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KAEMtB,KAAK7B,MAAME,aAAakD,IAAI,SAAC3B,EAAG4B,GAAJ,OAC1BvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,IAAKF,GACTvB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEC,KAAG,EACHC,MAAM,OACNrB,IAAKZ,EAAEkC,IACPpB,IAAKd,EAAEE,QACTG,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KAAYpC,EAAEE,OACdG,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,qIAvEhBC,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9C,MACvB,2DCZN+C,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASjE,SAASC,eAAe,SD2H3C,kBAAmBiE,WACrBA,UAAUC,cAAcC,MAAM9D,KAAK,SAAA+D,GACjCA,EAAaC","file":"static/js/main.b635b144.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gaucha.7fbff9ca.jpg\";","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {\n  Container,\n  Row,\n  Col,\n  Input,\n  Card,\n  CardImg,\n  CardTitle,\n  CardText,\n  CardColumns,\n  CardBody\n} from 'reactstrap';\nimport gaucha from './img/gaucha.jpg';\nimport escapeRegExp from 'escape-string-regexp'\nimport { Debounce } from 'react-throttle';\n\nclass App extends Component {\n    state = {\n      news: [],\n      filteredNews: [],\n      loading: true\n    }\n\n    loaded = () => {\n      document.getElementById('loader').style.display = \"none\";\n    }\n\n    componentDidMount = () => {\n      import(\"./news\").then(content => {\n        this.setState({\n          news: content.news,\n          filteredNews: content.news,\n          loading: false\n        })\n        this.loaded();\n      })\n      .catch(() => {\n        alert(\"Ops...Não foi possível carregar as notícias!\");\n      });\n    }\n\n    filterNews = (query) => {\n      const match = new RegExp(escapeRegExp(query), 'i');\n      this.setState({\n        filteredNews: this.state.news.filter(n => match.test(n.title))\n      })\n    }\n\n    render() {\n        return (\n            <Container className=\"h-100\">\n                <Row className={this.state.loading ? \"invisible\" : \"\"}>\n                    <Col className=\"text-center\">\n                      <img src={gaucha} alt=\"logo\" style={{height: '150px'}}/>\n                    </Col>\n                </Row>\n\n                { !this.state.loading &&\n                <div>\n                <Row>\n                    <Col><h3 className=\"title\">Notícias</h3></Col>\n                </Row>\n                <Row className=\"mb-3\">\n                    <Col>\n                      <Debounce time=\"400\" handler=\"onChange\">\n                        <Input\n                          onChange={(event) => this.filterNews(event.target.value)}\n                          placeholder=\"Filtrar notícia\"\n                          bsSize=\"lg\"\n                        />\n                      </Debounce>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col>\n                      <CardColumns>\n                          {\n                            this.state.filteredNews.map((n, index) =>\n                              <Card key={index}>\n                                <CardImg\n                                  top\n                                  width=\"100%\"\n                                  src={n.img}\n                                  alt={n.title} />\n                                <CardBody>\n                                  <CardTitle>{n.title}</CardTitle>\n                                  <CardText>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Illum nam totam quam sed assumenda explicabo sint.</CardText>\n                                </CardBody>\n                              </Card>\n                            )\n                          }\n                          </CardColumns>\n                    </Col>\n                </Row>\n                </div>\n                }\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}